{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TimeInput","props","react_default","a","createElement","type","value","onChange","handleChange","required","StartTimer","disabled","onClick","startCountDown","CountdownTimer","style","fontSize","textAlign","secondsValue","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isClicked","bind","assertThisInitialized","convert","event","setState","target","minute","Math","floor","secondsRemaining","second","clearInterval","intervalHandle","setInterval","time","App_TimeInput","App_StartTimer","App_CountdownTimer","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAEMA,EAAY,SAACC,GACf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASC,MAAOL,EAAMK,MAAOC,SAAUN,EAAMO,aAAcC,UAAQ,MAKrFC,EAAa,SAACT,GAChB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQO,UAAWV,EAAMK,MAAOM,QAASX,EAAMY,gBAA/C,WAMNC,EAAiB,SAACb,GACpB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIW,MAAO,CAAEC,SAAU,IAAKC,UAAW,WAAahB,EAAMK,MAA1D,IAAkEL,EAAMiB,gBAK/DC,cACjB,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMtB,KACD0B,MAAQ,CACTT,aAAc,KACdZ,MAAO,KACPsB,WAAW,GAGfR,EAAKZ,aAAeY,EAAKZ,aAAaqB,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACpBA,EAAKP,eAAiBO,EAAKP,eAAegB,KAApBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACtBA,EAAKW,QAAUX,EAAKW,QAAQF,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAVAA,4EAaNY,GACTT,KAAKU,SAAS,CACV3B,MAAO0B,EAAME,OAAO5B,0CAKxB,IAAI6B,EAASC,KAAKC,MAAMd,KAAKe,iBAAmB,IAC5CC,EAAShB,KAAKe,iBAA6B,GAATH,EAEtCZ,KAAKU,SAAS,CACV3B,MAAO6B,EACPjB,aAAcqB,IAGdA,EAAS,IACThB,KAAKU,SAAS,CACVf,aAAc,IAAMK,KAAKI,MAAMT,eAInCiB,EAAS,IACTZ,KAAKU,SAAS,CACV3B,MAAO,IAAM6B,IAIN,IAAXA,EAA0B,IAAXI,GACfC,cAAcjB,KAAKkB,gBAGvBlB,KAAKe,4DAILf,KAAKkB,eAAiBC,YAAYnB,KAAKQ,QAAS,KAChD,IAAIY,EAAOpB,KAAKI,MAAMrB,MACtBiB,KAAKe,iBAA0B,GAAPK,EACxBpB,KAAKU,SAAS,CACVL,WAAW,qCAKf,OACI1B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAAEE,UAAW,WACrBf,EAAAC,EAAAC,cAACwC,EAAD,CAAWtC,MAAOiB,KAAKI,MAAMrB,MAAOE,aAAce,KAAKf,eACvDN,EAAAC,EAAAC,cAACyC,EAAD,CAAYhC,eAAgBU,KAAKV,eAAgBP,MAAOiB,KAAKI,MAAMrB,SAEvEJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC0C,EAAD,CAAgBxC,MAAOiB,KAAKI,MAAMrB,MAAOY,aAAcK,KAAKI,MAAMT,yBAlEzD6B,aChBbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"main.ef1b9f25.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst TimeInput = (props) => {\n    return (\n        <div>\n            <h3>Enter Minute(s) to set countdown timer</h3>\n            <input type=\"number\" value={props.value} onChange={props.handleChange} required />\n        </div>\n    );\n}\n\nconst StartTimer = (props) => {\n    return (\n        <div>\n            <button disabled={!props.value} onClick={props.startCountDown}>Start</button>\n        </div>\n\n    );\n}\n\nconst CountdownTimer = (props) => {\n    return (\n        <div>\n            <h1 style={{ fontSize: 100, textAlign: \"center\" }}>{props.value}:{props.secondsValue}</h1>\n        </div>\n    );\n}\n\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            secondsValue: '00',\n            value: '00',\n            isClicked: false\n        }\n        \n        this.handleChange = this.handleChange.bind(this);\n        this.startCountDown = this.startCountDown.bind(this);\n        this.convert = this.convert.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({\n            value: event.target.value\n        })\n    }\n\n    convert() {\n        var minute = Math.floor(this.secondsRemaining / 60);\n        var second = this.secondsRemaining - (minute * 60);\n\n        this.setState({\n            value: minute,\n            secondsValue: second,\n        })\n\n        if (second < 10) {\n            this.setState({\n                secondsValue: \"0\" + this.state.secondsValue,\n            })\n        }\n\n        if (minute < 10) {\n            this.setState({\n                value: \"0\" + minute,\n            })\n        }\n\n        if (minute === 0 & second === 0) {\n            clearInterval(this.intervalHandle);\n        }\n\n        this.secondsRemaining--\n    }\n\n    startCountDown() {\n        this.intervalHandle = setInterval(this.convert, 1000);\n        let time = this.state.value;\n        this.secondsRemaining = time * 60;\n        this.setState({\n            isClicked: true\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <div style={{ textAlign: \"center\" }}>\n                        <TimeInput value={this.state.value} handleChange={this.handleChange} />\n                        <StartTimer startCountDown={this.startCountDown} value={this.state.value} />\n                    </div>\n                    <div>\n                        <CountdownTimer value={this.state.value} secondsValue={this.state.secondsValue} />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}