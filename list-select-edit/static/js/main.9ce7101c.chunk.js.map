{"version":3,"sources":["CheckBox.js","App.js","serviceWorker.js","index.js"],"names":["CheckBox","_ref","label","isSelected","onCheckboxChange","disable","react_default","a","createElement","className","type","name","checked","onChange","disabled","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showPreview","setState","isPreviewShown","cancelPreview","clearSelection","e","prevState","options","forEach","option","isChecked","handleCheckboxChange","target","map","value","objectSpread","handleFormSubmit","preventDefault","selections","state","filter","selectedOptions","id","_this2","length","key","onClick","onSubmit","src_CheckBox","selectedBoxCount","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ce7101c.chunk.js","sourcesContent":["import React from 'react'\n\nconst CheckBox = ({ label, isSelected, onCheckboxChange, disable }) => (\n    <div className=\"form-check\">\n      <label>\n        <input\n          type=\"checkbox\"\n          name={label}\n          checked={isSelected}\n          onChange={onCheckboxChange}\n          className=\"form-check-input\"\n          disabled={disable}\n        />\n        {label}\n      </label>\n    </div>\n  );\n\n\nexport default CheckBox\n","import React, { Component }  from 'react';\nimport  CheckBox  from './CheckBox'\n\nclass App extends Component {\n  constructor (props) {\n    super (props)\n    this.state = {\n      isPreviewShown: false,\n      options: [\n        {id: 1, value: \"Checkbox 1\", isChecked: true},\n        {id: 2, value: \"Checkbox 2\", isChecked: true},\n        {id: 3, value: \"Checkbox 3\", isChecked: true},\n        {id: 4, value: \"Checkbox 4\", isChecked: true},\n        {id: 5, value: \"Checkbox 5\", isChecked: false}\n      ],\n      selectedOptions: ''\n    }\n  }\n\n  componentDidMount () {\n    let selections = this.state.options.filter(option => option.isChecked)\n    this.setState({\n      selectedOptions: selections,\n      isPreviewShown: false\n    })\n  }\n\n  showPreview = () => {\n    this.setState({isPreviewShown: true})\n  }\n  cancelPreview = () => {\n    this.setState({isPreviewShown: false})\n  }\n  clearSelection = (e) => {\n    this.setState(prevState => {\n      let { options } = prevState;\n      options.forEach(option => {\n        option.isChecked = false\n      })\n      return { options };\n    })\n  }\n\n  handleCheckboxChange = e => {\n    let name = e.target.name\n    let checked = e.target.checked;\n    this.setState(prevState => {\n      let { options } = prevState;\n      options = options.map(option =>\n        option.value === name ? { ...option, isChecked: checked } : option\n      );\n      return { options };\n    })\n  }\n  handleFormSubmit = (e) => {\n    e.preventDefault()\n    let selections = this.state.options.filter(option => option.isChecked)\n    this.setState({\n      selectedOptions: selections,\n      isPreviewShown: false\n    })\n  }\n\n  selectedBoxCount () {\n    return this.state.options.filter(option => option.isChecked)\n  }\n\n  render () {\n    return (\n      <div className='container'>\n        <div className='mt-5'>\n          <div className='display-box'>\n            {this.state.selectedOptions.length > 0 ? \n              this.state.selectedOptions.map(option => (\n                <div key={option.id}> {option.value} </div>\n              ))\n             : null\n            }\n            {this.state.isPreviewShown ? null : <button type=\"button\" className='btn btn-outline-primary mt-3 w-25' onClick={this.showPreview}> Edit </button>}\n          </div>\n\n          {this.state.isPreviewShown ? \n            <div className='preview-box'>\n              <form onSubmit={this.handleFormSubmit}>\n                <div className='row ml-0 mb-4'>\n                  <button type=\"submit\" className='btn btn-outline-primary'> Save </button>\n                  <button type=\"button\" className='btn btn-outline-primary ml-1' onClick={this.clearSelection}> Clear </button>\n                  <button type=\"button\" className='btn btn-outline-primary ml-1' onClick={this.cancelPreview}> Cancel </button>\n                </div>\n                {this.state.options.map(option => (\n                  <CheckBox\n                    label={option.value}\n                    isSelected={option.isChecked}\n                    onCheckboxChange={this.handleCheckboxChange}\n                    key={option.id}\n                    disable={this.selectedBoxCount().length === 4}\n                  />\n                ))}\n                \n              </form>\n            </div>\n            : null\n          }\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}